import "./chunk-BUSYA2B4.js";

// node_modules/deskthing-client/dist/index.js
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var VolMode;
(function(VolMode2) {
  VolMode2["WHEEL"] = "wheel";
  VolMode2["SLIDER"] = "slider";
  VolMode2["BAR"] = "bar";
})(VolMode || (VolMode = {}));
var ViewMode;
(function(ViewMode2) {
  ViewMode2["HIDDEN"] = "hidden";
  ViewMode2["PEEK"] = "peek";
  ViewMode2["FULL"] = "full";
})(ViewMode || (ViewMode = {}));
var AUDIO_REQUESTS;
(function(AUDIO_REQUESTS2) {
  AUDIO_REQUESTS2["NEXT"] = "next";
  AUDIO_REQUESTS2["PREVIOUS"] = "previous";
  AUDIO_REQUESTS2["REWIND"] = "rewind";
  AUDIO_REQUESTS2["FAST_FORWARD"] = "fast_forward";
  AUDIO_REQUESTS2["PLAY"] = "play";
  AUDIO_REQUESTS2["PAUSE"] = "pause";
  AUDIO_REQUESTS2["SEEK"] = "seek";
  AUDIO_REQUESTS2["LIKE"] = "like";
  AUDIO_REQUESTS2["SONG"] = "song";
  AUDIO_REQUESTS2["VOLUME"] = "volume";
  AUDIO_REQUESTS2["REPEAT"] = "repeat";
  AUDIO_REQUESTS2["SHUFFLE"] = "shuffle";
})(AUDIO_REQUESTS || (AUDIO_REQUESTS = {}));
var EventMode;
(function(EventMode2) {
  EventMode2[EventMode2["KeyUp"] = 0] = "KeyUp";
  EventMode2[EventMode2["KeyDown"] = 1] = "KeyDown";
  EventMode2[EventMode2["ScrollUp"] = 2] = "ScrollUp";
  EventMode2[EventMode2["ScrollDown"] = 3] = "ScrollDown";
  EventMode2[EventMode2["ScrollLeft"] = 4] = "ScrollLeft";
  EventMode2[EventMode2["ScrollRight"] = 5] = "ScrollRight";
  EventMode2[EventMode2["SwipeUp"] = 6] = "SwipeUp";
  EventMode2[EventMode2["SwipeDown"] = 7] = "SwipeDown";
  EventMode2[EventMode2["SwipeLeft"] = 8] = "SwipeLeft";
  EventMode2[EventMode2["SwipeRight"] = 9] = "SwipeRight";
  EventMode2[EventMode2["PressShort"] = 10] = "PressShort";
  EventMode2[EventMode2["PressLong"] = 11] = "PressLong";
})(EventMode || (EventMode = {}));
var DeskThingClass = class _DeskThingClass {
  /**
   * Initializes the DeskThing instance and sets up event listeners.
   * Sends a message to the parent indicating that the client has started.
   * Also sets up a click event listener for buttons.
   */
  constructor() {
    this.listeners = {};
    this.fetchData = (type, requestData, request) => __awaiter(this, void 0, void 0, function* () {
      const timeout = new Promise((_, reject) => {
        setTimeout(() => reject(new Error("Music data request timed out")), 5e3);
      });
      const dataPromise = new Promise((resolve) => {
        this.once(type, (data) => {
          resolve(data.payload);
        }, request);
        this.send(requestData);
      });
      return Promise.race([dataPromise, timeout]).catch(() => void 0);
    });
    this.getMusic = () => __awaiter(this, void 0, void 0, function* () {
      const musicData = yield this.fetchData("music", {
        app: "client",
        type: "get",
        request: "music",
        payload: {}
      });
      if (musicData && musicData.thumbnail) {
        musicData.thumbnail = this.formatImageUrl(musicData.thumbnail);
      }
      return musicData;
    });
    this.getSettings = () => __awaiter(this, void 0, void 0, function* () {
      return this.fetchData("settings", {
        app: "client",
        type: "get",
        request: "settings",
        payload: {}
      });
    });
    this.getApps = () => __awaiter(this, void 0, void 0, function* () {
      return this.fetchData("apps", {
        app: "client",
        type: "get",
        request: "apps",
        payload: {}
      });
    });
    this.getKeyIcon = (key) => __awaiter(this, void 0, void 0, function* () {
      return this.fetchData(key.id, {
        app: "client",
        type: "get",
        request: "key",
        payload: key
      });
    });
    this.getActionIcon = (action) => __awaiter(this, void 0, void 0, function* () {
      return this.fetchData(action.id, {
        app: "client",
        type: "get",
        request: "action",
        payload: action
      });
    });
    this.triggerAction = (action) => __awaiter(this, void 0, void 0, function* () {
      this.send({ app: "client", type: "action", payload: action });
    });
    this.triggerKey = (keyTrigger) => __awaiter(this, void 0, void 0, function* () {
      this.send({ app: "client", type: "key", payload: keyTrigger });
    });
    this.getManifest = () => __awaiter(this, void 0, void 0, function* () {
      if (this.manifest) {
        return this.manifest;
      }
      return this.fetchData("manifest", {
        app: "client",
        type: "get",
        request: "manifest",
        payload: {}
      });
    });
    this.formatImageUrl = (image) => {
      if (!this.manifest) {
        return image;
      }
      if (image.startsWith("data:image")) {
        return image;
      }
      return image.replace("localhost:8891", `${this.manifest.ip}:${this.manifest.port}`);
    };
    this.initialize();
    this.initializeListeners();
  }
  /**
   * Initializes the message event listener.
   * @private
   */
  initialize() {
    window.addEventListener("message", this.handleMessage.bind(this));
  }
  /**
   * Sets up the listeners and bubbles them to the server
   * @private
   */
  initializeListeners() {
    return __awaiter(this, void 0, void 0, function* () {
      const eventsToForward = ["wheel", "keydown", "keyup"];
      const forwardEvent = (event) => {
        if (event.defaultPrevented) {
          return;
        }
        if (event instanceof KeyboardEvent) {
          const key = event.code;
          const mode = event.type === "keydown" ? EventMode.KeyDown : EventMode.KeyUp;
          this.triggerKey({ key, mode });
        } else if (event instanceof WheelEvent) {
          let mode = EventMode.ScrollUp;
          if (event.deltaY > 0)
            mode = EventMode.ScrollDown;
          else if (event.deltaY < 0)
            mode = EventMode.ScrollUp;
          else if (event.deltaX > 0)
            mode = EventMode.ScrollRight;
          else if (event.deltaX < 0)
            mode = EventMode.ScrollLeft;
          this.triggerKey({ key: "Scroll", mode });
        }
      };
      const options = { capture: true, passive: false };
      eventsToForward.forEach((eventType) => {
        document.addEventListener(eventType, forwardEvent, options);
      });
      const fetchManifest = () => __awaiter(this, void 0, void 0, function* () {
        this.manifest = yield this.fetchData("manifest", { type: "get", request: "manifest", app: "client" });
      });
      const handleManifest = (socketData) => __awaiter(this, void 0, void 0, function* () {
        if (socketData.type == "manifest" && socketData.payload) {
          this.manifest = socketData.payload;
        }
      });
      fetchManifest();
      this.on("manifest", handleManifest);
    });
  }
  /**
   * Singleton pattern: Ensures only one instance of DeskThing exists.
   * @returns {DeskThingClass} The single instance of DeskThing
   *
   * @example
   * const deskThing = DeskThing.getInstance();
   */
  static getInstance() {
    if (!this.instance) {
      this.instance = new _DeskThingClass();
    }
    return this.instance;
  }
  /**
   * Registers an event listener for a specific event type.
   * @param {string} type - The type of event to listen for
   * @param {EventCallback} callback - The function to call when the event occurs
   * @returns {Function} A function to remove the event listener
   *
   * @example
   * const removeListener = deskThing.on('music', (data: SocketData) => {
   *   console.log('Received music data:', data.payload);
   * });
   *
   * @example
   * // Client-side code (here)
   * const removeListener = deskThing.on('customdata', (data: SocketData) => {
   *   console.log('Received custom data:', data.payload);
   * });
   *
   * // Server-side code
   * DeskThing.send({ type: 'customdata', payload: 'Hello from the server!' });
   */
  on(type, callback) {
    if (!this.listeners[type]) {
      this.listeners[type] = [];
    }
    this.listeners[type].push(callback);
    return () => this.off(type, callback);
  }
  /**
   * Removes an event listener for a specific event type.
   * @param {string} type - The type of event to remove the listener from
   * @param {EventCallback} callback - The function to remove from the listeners
   *
   * @example
   * deskThing.off('message', messageCallback);
   */
  off(type, callback) {
    if (this.listeners[type]) {
      this.listeners[type] = this.listeners[type].filter((listener) => listener !== callback);
    }
  }
  /**
   * Handles incoming messages from the parent window.
   * @param {MessageEvent} event - The message event received
   * @private
   */
  handleMessage(event) {
    if (event.data.source !== "deskthing")
      return;
    const socketData = event.data;
    this.emit(socketData.type, socketData);
  }
  /**
   * Emits an event to all registered listeners for that event type.
   * @param {string} type - The type of event to emit
   * @param {SocketData} data - The data to pass to the event listeners
   * @returns {Promise<void>}
   * @private
   */
  emit(type, data) {
    return __awaiter(this, void 0, void 0, function* () {
      const callbacks = this.listeners[type];
      if (callbacks) {
        callbacks.forEach((callback) => callback(data));
      }
    });
  }
  /**
  * Listens for a single occurrence of an event, then removes the listener
  * @param {string} type - The event type to listen for
  * @param {EventCallback} callback - The function to call when the event occurs
  * @returns {Function} - Function to manually remove the listener
  *
  * @example
  * deskThing.once('music', (data) => {
  *   console.log('Received music data:', data.payload);
  * });
  *
  * @example
  * // Client-side code (here)
  * deskThing.once('data', (data) => {
  *   console.log('Received specific request:', data.payload); // prints Payload 3 once
  * }, 'specificRequest');
  *
  *  // Server-side code
  * DeskThing.send({ type: 'data', payload: 'Payload 1', request: 'someRequest' }); // Wont send
  * DeskThing.send({ type: 'data', payload: 'Payload 2', request: 'randomRequest' }); // Wont send
  * DeskThing.send({ type: 'data', payload: 'Payload 3', request: 'specificRequest' }); // Will send
  * DeskThing.send({ type: 'data', payload: 'Payload 4', request: 'faultyRequest' }); // Wont send
  * DeskThing.send({ type: 'data', payload: 'Payload 5', request: 'specificRequest' }); // Wont send
  */
  once(type, callback, request) {
    const removeListener = this.on(type, (data) => {
      if (request && data.request !== request)
        return;
      callback(data);
      removeListener();
    });
    return removeListener;
  }
  /**
   * Sends a message to the parent window.
   * @param {SocketData} data - The data to send to the parent. "app" defaults to the current app
   * @deprecated Use send() instead
   * @example
   * deskThing.sendMessageToParent({
   *   app: 'client',
   *   type: 'action',
   *   payload: { buttonClicked: 'submit' }
   * });
   */
  sendMessageToParent(data) {
    this.send(data);
  }
  /**
   * Sends a message to the parent window.
   * @param {SocketData} data - The data to send to the parent. "app" defaults to the current app
   *
   * @example
   * deskThing.send({
   *   app: 'client',
   *   type: 'action',
   *   payload: { buttonClicked: 'submit' }
   * });
   */
  send(data) {
    const payload = {
      app: data.app || void 0,
      type: data.type || void 0,
      request: data.request || null,
      payload: data.payload || null
    };
    window.parent.postMessage({ type: "IFRAME_ACTION", payload }, "*");
  }
};
var DeskThing = DeskThingClass.getInstance();
export {
  AUDIO_REQUESTS,
  DeskThing,
  DeskThingClass,
  EventMode,
  ViewMode,
  VolMode
};
//# sourceMappingURL=deskthing-client.js.map
