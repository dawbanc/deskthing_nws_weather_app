{
  "version": 3,
  "sources": ["../../deskthing-client/dist/index.js"],
  "sourcesContent": ["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport var VolMode;\n(function (VolMode) {\n    VolMode[\"WHEEL\"] = \"wheel\";\n    VolMode[\"SLIDER\"] = \"slider\";\n    VolMode[\"BAR\"] = \"bar\";\n})(VolMode || (VolMode = {}));\nexport var ViewMode;\n(function (ViewMode) {\n    ViewMode[\"HIDDEN\"] = \"hidden\";\n    ViewMode[\"PEEK\"] = \"peek\";\n    ViewMode[\"FULL\"] = \"full\";\n})(ViewMode || (ViewMode = {}));\nexport var AUDIO_REQUESTS;\n(function (AUDIO_REQUESTS) {\n    AUDIO_REQUESTS[\"NEXT\"] = \"next\";\n    AUDIO_REQUESTS[\"PREVIOUS\"] = \"previous\";\n    AUDIO_REQUESTS[\"REWIND\"] = \"rewind\";\n    AUDIO_REQUESTS[\"FAST_FORWARD\"] = \"fast_forward\";\n    AUDIO_REQUESTS[\"PLAY\"] = \"play\";\n    AUDIO_REQUESTS[\"PAUSE\"] = \"pause\";\n    AUDIO_REQUESTS[\"SEEK\"] = \"seek\";\n    AUDIO_REQUESTS[\"LIKE\"] = \"like\";\n    AUDIO_REQUESTS[\"SONG\"] = \"song\";\n    AUDIO_REQUESTS[\"VOLUME\"] = \"volume\";\n    AUDIO_REQUESTS[\"REPEAT\"] = \"repeat\";\n    AUDIO_REQUESTS[\"SHUFFLE\"] = \"shuffle\";\n})(AUDIO_REQUESTS || (AUDIO_REQUESTS = {}));\nexport var EventMode;\n(function (EventMode) {\n    EventMode[EventMode[\"KeyUp\"] = 0] = \"KeyUp\";\n    EventMode[EventMode[\"KeyDown\"] = 1] = \"KeyDown\";\n    EventMode[EventMode[\"ScrollUp\"] = 2] = \"ScrollUp\";\n    EventMode[EventMode[\"ScrollDown\"] = 3] = \"ScrollDown\";\n    EventMode[EventMode[\"ScrollLeft\"] = 4] = \"ScrollLeft\";\n    EventMode[EventMode[\"ScrollRight\"] = 5] = \"ScrollRight\";\n    EventMode[EventMode[\"SwipeUp\"] = 6] = \"SwipeUp\";\n    EventMode[EventMode[\"SwipeDown\"] = 7] = \"SwipeDown\";\n    EventMode[EventMode[\"SwipeLeft\"] = 8] = \"SwipeLeft\";\n    EventMode[EventMode[\"SwipeRight\"] = 9] = \"SwipeRight\";\n    EventMode[EventMode[\"PressShort\"] = 10] = \"PressShort\";\n    EventMode[EventMode[\"PressLong\"] = 11] = \"PressLong\";\n})(EventMode || (EventMode = {}));\nexport class DeskThingClass {\n    /**\n     * Initializes the DeskThing instance and sets up event listeners.\n     * Sends a message to the parent indicating that the client has started.\n     * Also sets up a click event listener for buttons.\n     */\n    constructor() {\n        this.listeners = {};\n        /**\n       * Asynchronously waits for a response after sending a request to the client\n       * @param {string} type - The type to listen to\n       * @param {SocketData} requestData - The data to send that will be listened to\n       * @param {string?} request (optional) A specific request to listen for\n       * @returns {Promise<t | undefined>} - The retrieved data, or undefined if the request fails or times out after 5 seconds\n       *\n       * This will automatically return the payload of the response.\n       *\n       * @example\n       * // On the client\n       * const data = await deskThing.fetchData<UserProfile>('users', {\n       *   type: 'get',\n       *   request: 'profile',\n       *   payload: { userId: '123' }\n       * });\n       * console.log(data); // prints the user profile data\n       *\n       * // On the server\n       * DeskThing.on('get', (data) => {\n       *  if (data.request == 'profile') {\n       *    DeskThing.send({\n       *      type: 'users',\n       *      payload: users.getUserById(data.payload.userId)\n       *    })\n       *  }\n       * }\n       */\n        this.fetchData = (type, requestData, request) => __awaiter(this, void 0, void 0, function* () {\n            const timeout = new Promise((_, reject) => {\n                setTimeout(() => reject(new Error('Music data request timed out')), 5000);\n            });\n            const dataPromise = new Promise((resolve) => {\n                this.once(type, (data) => {\n                    resolve(data.payload);\n                }, request);\n                this.send(requestData);\n            });\n            return Promise.race([dataPromise, timeout])\n                .catch(() => undefined);\n        });\n        /**\n         * Requests and waits for music data from the server\n         * @returns {Promise<SongData | undefined>} - The retrieved music data, or undefined if the request fails\n         *\n         * @example\n         * const musicData = await deskThing.getMusic();\n         * if (musicData) {\n         *   console.log('Current song:', musicData.song_title);\n         * }\n         */\n        this.getMusic = () => __awaiter(this, void 0, void 0, function* () {\n            const musicData = yield this.fetchData('music', {\n                app: 'client',\n                type: 'get',\n                request: 'music',\n                payload: {}\n            });\n            if (musicData && musicData.thumbnail) {\n                musicData.thumbnail = this.formatImageUrl(musicData.thumbnail);\n            }\n            return musicData;\n        });\n        /**\n       * Requests and waits for application settings from the server\n       * @returns {Promise<AppSettings | undefined>} - The retrieved settings, or undefined if the request fails\n       *\n       * @example\n       * const settings = await deskThing.getSettings();\n       * if (settings) {\n       *   console.log('Theme:', settings.theme.value);\n       *   console.log('Language:', settings.language.value);\n       * }\n       */\n        this.getSettings = () => __awaiter(this, void 0, void 0, function* () {\n            return this.fetchData('settings', {\n                app: 'client',\n                type: 'get',\n                request: 'settings',\n                payload: {}\n            });\n        });\n        /**\n       * Requests and waits for the list of installed apps from the server\n       * @returns {Promise<App[] | undefined>} - The retrieved apps list, or undefined if the request fails\n       *\n       * @example\n       * const installedApps = await deskThing.getApps();\n       * if (installedApps) {\n       *   installedApps.forEach(app => {\n       *     console.log('App name:', app.name);\n       *   });\n       * }\n       */\n        this.getApps = () => __awaiter(this, void 0, void 0, function* () {\n            return this.fetchData('apps', {\n                app: 'client',\n                type: 'get',\n                request: 'apps',\n                payload: {}\n            });\n        });\n        /**\n         * Returns the URL for the action mapped to the key. Usually, the URL points to an SVG icon.\n         * @param key\n         * @returns {Promise<string | undefined>} - The URL for the action icon, or undefined if the request fails\n         */\n        this.getKeyIcon = (key) => __awaiter(this, void 0, void 0, function* () {\n            return this.fetchData(key.id, {\n                app: 'client',\n                type: 'get',\n                request: 'key',\n                payload: key\n            });\n        });\n        /**\n         * Returns the URL for the action . Usually, the URL points to an SVG icon.\n         * @param action\n         * @returns {Promise<string | undefined>} - The URL for the action icon, or undefined if the request fails\n         */\n        this.getActionIcon = (action) => __awaiter(this, void 0, void 0, function* () {\n            return this.fetchData(action.id, {\n                app: 'client',\n                type: 'get',\n                request: 'action',\n                payload: action\n            });\n        });\n        /**\n       * Triggers an action as if it were triggered by a button\n       * @param {ActionReference} action - The action to trigger\n       * @param {string} action.id - The ID of the action\n       * @param {string} [action.value] - Optional value for the action\n       * @param {string} [action.source] - Optional source of the action (defaults to current app)\n       *\n       * @example\n       * // Trigger a simple action\n       * deskThing.triggerAction({ id: 'do-something' });\n       *\n       * // Trigger an action with a value and custom source\n       * deskThing.triggerAction({\n       *   id: 'volup',\n       *   value: '15',\n       *   source: 'server'\n       * });\n       *\n       * @example\n       * // Trigger an action that modifies the client\n       * deskThing.triggerAction({\n       *   id: 'appslist',\n       *   value: 'show',\n       *   source: 'server'\n       * });\n       *\n       * @example\n       * // Trigger an action on your app\n       * deskThing.triggerAction({\n       *   id: 'service',\n       *   value: 'restart'\n       * });\n       *\n       * // Server-side code\n       * DeskThing.on('action', (action) => {\n       *   if (action.id === 'service') {\n       *     console.log(action.value); // prints restart\n       *   }\n       * });\n       */\n        this.triggerAction = (action) => __awaiter(this, void 0, void 0, function* () {\n            this.send({ app: 'client', type: 'action', payload: action });\n        });\n        /**\n       * Triggers the action tied to a specific key\n       * @param {KeyTrigger} keyTrigger - The key trigger configuration\n       * @param {string} keyTrigger.key - The key to trigger\n       * @param {EventMode} keyTrigger.mode - The event mode (e.g., 'keydown', 'keyup')\n       * @param {string} [keyTrigger.source] - Optional source of the key trigger (defaults to current app)\n       *\n       * @example\n       * // Trigger a keydown event\n       * deskThing.triggerKey({\n       *   key: 'Enter',\n       *   mode: EventMode.KeyDown,\n       *   source: 'server'\n       * });\n       *\n       * // Trigger a keyup event with custom source\n       * deskThing.triggerKey({\n       *   key: 'Escape',\n       *   mode: EventMode.PressLong,\n       *   source: 'server'\n       * });\n       */\n        this.triggerKey = (keyTrigger) => __awaiter(this, void 0, void 0, function* () {\n            this.send({ app: 'client', type: 'key', payload: keyTrigger });\n        });\n        /**\n         * Returns the manifest of the current app\n         * @returns {Promise<Manifest | undefined>} The manifest of the current app, or undefined if the request fails\n         */\n        this.getManifest = () => __awaiter(this, void 0, void 0, function* () {\n            if (this.manifest) {\n                return this.manifest;\n            }\n            return this.fetchData('manifest', {\n                app: 'client',\n                type: 'get',\n                request: 'manifest',\n                payload: {}\n            });\n        });\n        /**\n         * Formats an image URL to make the returned string a usable src for an image\n         * @param image - A legacy-acceptable image url that can be either base64 OR a url\n         * @returns - a usable URL\n         *\n         * @example\n         * //server\n         * DeskThing.on('getImage', (socketData: SocketData) => {\n         *    const imageUrl = await DeskThing.saveImageReferenceFromURL('https://host.com/some/image/url.png')\n         *    DeskThing.send({ type: 'image', payload: imageUrl || '' })\n         * })\n         *\n         * // client\n         * const imageUrl = await DeskThing.fetchData<string>('image', { type: 'getImage' })\n         * const formattedImage = DeskThing.formatImageUrl(imageUrl)\n         * return <img src={formattedImage} alt=\"Image\" />\n         * @example\n         * //server\n         * const imageUrl = await DeskThing.saveImageReferenceFromURL(settings.image.value)\n         * DeskThing.send({ type: 'image', payload: imageUrl || '' })\n         *\n         * // client\n         * const [image, setImage] = useState<string>('')\n         * const imageUrl = await DeskThing.on('image', (imageUrl) => {\n         *   const formattedImage = DeskThing.formatImageUrl(imageUrl)\n         *   setImage(formattedImage)\n         * })\n         * return <img src={image} alt=\"Image\" />\n         */\n        this.formatImageUrl = (image) => {\n            if (!this.manifest) {\n                return image;\n            }\n            if (image.startsWith('data:image')) {\n                return image;\n            }\n            return image.replace('localhost:8891', `${this.manifest.ip}:${this.manifest.port}`);\n        };\n        this.initialize();\n        this.initializeListeners();\n    }\n    /**\n     * Initializes the message event listener.\n     * @private\n     */\n    initialize() {\n        window.addEventListener('message', this.handleMessage.bind(this));\n    }\n    /**\n     * Sets up the listeners and bubbles them to the server\n     * @private\n     */\n    initializeListeners() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const eventsToForward = ['wheel', 'keydown', 'keyup'];\n            const forwardEvent = (event) => {\n                // Check if event was prevented elsewhere\n                if (event.defaultPrevented) {\n                    return;\n                }\n                // Check if it is a keyboard event and handle those differently\n                if (event instanceof KeyboardEvent) {\n                    // Get the code for the key that was pressed\n                    const key = event.code;\n                    const mode = event.type === 'keydown' ? EventMode.KeyDown : EventMode.KeyUp;\n                    this.triggerKey({ key, mode });\n                }\n                else if (event instanceof WheelEvent) {\n                    // Initialize the mode of the button press\n                    let mode = EventMode.ScrollUp;\n                    if (event.deltaY > 0)\n                        mode = EventMode.ScrollDown;\n                    else if (event.deltaY < 0)\n                        mode = EventMode.ScrollUp;\n                    else if (event.deltaX > 0)\n                        mode = EventMode.ScrollRight;\n                    else if (event.deltaX < 0)\n                        mode = EventMode.ScrollLeft;\n                    this.triggerKey({ key: 'Scroll', mode });\n                }\n            };\n            const options = { capture: true, passive: false };\n            eventsToForward.forEach(eventType => {\n                document.addEventListener(eventType, forwardEvent, options);\n            });\n            const fetchManifest = () => __awaiter(this, void 0, void 0, function* () {\n                this.manifest = yield this.fetchData('manifest', { type: 'get', request: 'manifest', app: 'client' });\n            });\n            const handleManifest = (socketData) => __awaiter(this, void 0, void 0, function* () {\n                if (socketData.type == 'manifest' && socketData.payload) {\n                    this.manifest = socketData.payload;\n                }\n            });\n            fetchManifest();\n            this.on('manifest', handleManifest);\n        });\n    }\n    /**\n     * Singleton pattern: Ensures only one instance of DeskThing exists.\n     * @returns {DeskThingClass} The single instance of DeskThing\n     *\n     * @example\n     * const deskThing = DeskThing.getInstance();\n     */\n    static getInstance() {\n        if (!this.instance) {\n            this.instance = new DeskThingClass();\n        }\n        return this.instance;\n    }\n    /**\n     * Registers an event listener for a specific event type.\n     * @param {string} type - The type of event to listen for\n     * @param {EventCallback} callback - The function to call when the event occurs\n     * @returns {Function} A function to remove the event listener\n     *\n     * @example\n     * const removeListener = deskThing.on('music', (data: SocketData) => {\n     *   console.log('Received music data:', data.payload);\n     * });\n     *\n     * @example\n     * // Client-side code (here)\n     * const removeListener = deskThing.on('customdata', (data: SocketData) => {\n     *   console.log('Received custom data:', data.payload);\n     * });\n     *\n     * // Server-side code\n     * DeskThing.send({ type: 'customdata', payload: 'Hello from the server!' });\n     */\n    on(type, callback) {\n        if (!this.listeners[type]) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(callback);\n        return () => this.off(type, callback);\n    }\n    /**\n     * Removes an event listener for a specific event type.\n     * @param {string} type - The type of event to remove the listener from\n     * @param {EventCallback} callback - The function to remove from the listeners\n     *\n     * @example\n     * deskThing.off('message', messageCallback);\n     */\n    off(type, callback) {\n        if (this.listeners[type]) {\n            this.listeners[type] = this.listeners[type].filter(listener => listener !== callback);\n        }\n    }\n    /**\n     * Handles incoming messages from the parent window.\n     * @param {MessageEvent} event - The message event received\n     * @private\n     */\n    handleMessage(event) {\n        // Return if the message is not from the deskthing\n        if (event.data.source !== 'deskthing')\n            return;\n        const socketData = event.data;\n        this.emit(socketData.type, socketData);\n    }\n    /**\n     * Emits an event to all registered listeners for that event type.\n     * @param {string} type - The type of event to emit\n     * @param {SocketData} data - The data to pass to the event listeners\n     * @returns {Promise<void>}\n     * @private\n     */\n    emit(type, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const callbacks = this.listeners[type];\n            if (callbacks) {\n                callbacks.forEach(callback => callback(data));\n            }\n        });\n    }\n    /**\n   * Listens for a single occurrence of an event, then removes the listener\n   * @param {string} type - The event type to listen for\n   * @param {EventCallback} callback - The function to call when the event occurs\n   * @returns {Function} - Function to manually remove the listener\n   *\n   * @example\n   * deskThing.once('music', (data) => {\n   *   console.log('Received music data:', data.payload);\n   * });\n   *\n   * @example\n   * // Client-side code (here)\n   * deskThing.once('data', (data) => {\n   *   console.log('Received specific request:', data.payload); // prints Payload 3 once\n   * }, 'specificRequest');\n   *\n   *  // Server-side code\n   * DeskThing.send({ type: 'data', payload: 'Payload 1', request: 'someRequest' }); // Wont send\n   * DeskThing.send({ type: 'data', payload: 'Payload 2', request: 'randomRequest' }); // Wont send\n   * DeskThing.send({ type: 'data', payload: 'Payload 3', request: 'specificRequest' }); // Will send\n   * DeskThing.send({ type: 'data', payload: 'Payload 4', request: 'faultyRequest' }); // Wont send\n   * DeskThing.send({ type: 'data', payload: 'Payload 5', request: 'specificRequest' }); // Wont send\n   */\n    once(type, callback, request) {\n        const removeListener = this.on(type, (data) => {\n            if (request && data.request !== request)\n                return;\n            callback(data);\n            removeListener();\n        });\n        return removeListener;\n    }\n    /**\n     * Sends a message to the parent window.\n     * @param {SocketData} data - The data to send to the parent. \"app\" defaults to the current app\n     * @deprecated Use send() instead\n     * @example\n     * deskThing.sendMessageToParent({\n     *   app: 'client',\n     *   type: 'action',\n     *   payload: { buttonClicked: 'submit' }\n     * });\n     */\n    sendMessageToParent(data) {\n        this.send(data);\n    }\n    /**\n     * Sends a message to the parent window.\n     * @param {SocketData} data - The data to send to the parent. \"app\" defaults to the current app\n     *\n     * @example\n     * deskThing.send({\n     *   app: 'client',\n     *   type: 'action',\n     *   payload: { buttonClicked: 'submit' }\n     * });\n     */\n    send(data) {\n        const payload = {\n            app: data.app || undefined,\n            type: data.type || undefined,\n            request: data.request || null,\n            payload: data.payload || null\n        };\n        window.parent.postMessage({ type: 'IFRAME_ACTION', payload: payload }, '*');\n    }\n}\nexport const DeskThing = DeskThingClass.getInstance();\n"],
  "mappings": "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",
  "names": ["VolMode", "ViewMode", "AUDIO_REQUESTS", "EventMode"]
}
